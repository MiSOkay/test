GateStatus 관련 포트폴리오 면접 질문

1. 프로젝트 소개 2030 젊은 세대의 투표 독려 및 정치인의 공약과 발언을 쉽게 찾게 도와주는 플랫폼입니다. ChatGPT를 사용해 AI 기반 발언 및 기사를 참조해 팩트체크를 하는 기능을 갖추고 국회 공개 API와 OpenAI, Naver 뉴스 를 연동했습니다 
2. 프로젝트 동기  
3. 멀티 데이터베이스 설계 - PostgreSQL과 MongoDB를 함께 사용한 이유는? PostgreSQL로 정치인의 기본 정보, 법률, 투표 기록만 담당했습니다 변하지않는 공식 데이터와 관계형 구조를 위해서 였고 MongoDB는 "OpenAPI로 수집하는 대용량 발언 데이터를 효율적으로 저장하고, 뉴스와 교차 분석해서 AI 팩트체크 점수를 매기는 시스템이다보니 MongoDB가 필수였습니다. 특히 정치인 발언 텍스트 검색 성능과 AI 분석 결과를 유연하게 저장할 수 있어서 선택했습니다." 
4. 도메인 구조를 어떻게 설계했나요 ? DDD 도메인 주도 설계를 통해 도메인 별로 분리하고, 각 도메인 내에서 레이어드 아키텍쳐로 기술적 관심사를 분리했습니다 그리고 기능별 패키징으로 응집도를 높였습니다. 
5. Redis를 어떻게 사용했나요 ? Redis를 세 가지 용도로 활용했습니다. 첫째, 세션 관리로 사용자 로그인 상태를 2시간 TTL로 저장해서 서버 재시작 시에도 로그인이 유지됩니다. 둘째, 자주 조회되는 정치인 목록과 이슈 정보를 캐싱해서 DB 조회 시간을 500ms에서 20ms로 단축했습니다. 셋째, 데이터 특성에 따라 TTL을 차등 적용했는데, 거의 변하지 않는 정당별 정치인은 1시간, 상대적으로 자주 바뀌는 인기 정치인은 30분으로 설정했습니다. 
6. OpenAI를 어떻게 활용했나요? 
7. AI API호출 비용과 성능을 어떻게 최적화했나요 ?
8. Kafka와 RabbitMQ를 함께 사용한 이유는 ?
9. 국회 API 연동에서 어려웠던 점은? 
10. 성능 개선을 위해 어떤 노력을 했나요 ?
11. 사용자가 급증할땐 어떻게 대응할건가요 ?
12. Kubernetes를 사용한 이유와 경험은 ?
13. 서비스 모니터링은 어떻게 하고 있나요 ?
14. 보안을 어떻게 구현했나요 ?
15. 가장 어려웠던 기술적 문제와 해결 방법은 ?
16. 멀티 데이터베이스 환경에서 어떻게 데이터 일관성을 보장했나요?
17. 정치인 비교 분석 기능은 어떻게 구현했나요 ?
18. RESTful API 설계 시 고려한 점은?
19. 코드 품질을 어떻게 관리했나요 ?
20. 코드를 개선한 경험이 있나요?
21. 이 프로젝트를 더 발전시킨다면?

* 예상 꼬리 질문:
* "그럼 MongoDB 대신 PostgreSQL만 써도 되지 않았을까요?"
* "OpenAI API 비용이 많이 나올 텐데 어떻게 관리했나요?"
* "사용자가 100만명이 되면 어떻게 대응할 건가요?"
* "보안 취약점은 없나요?"
* "테스트는 어떻게 작성했나요?"

